#!/usr/bin/env python2

import wt_vs_mut

def test_trivial_alignment():
    input_1 = 'MNTPEHMTAVVQRYVAA'
    input_2 = 'MNTPEHMTAVVQRYVAA'
    output_1 = 'MNTPEHMTAVVQRYVAA'
    output_2 = 'MNTPEHMTAVVQRYVAA'
    assert wt_vs_mut.get_alignment(input_1, input_2) == (output_1, output_2)

def test_toy_alignment():
    input_1 = 'MNTPEHMTAVVQRYVAA'
    input_2 = 'MNTPEHGGGGGQRYVAA'
    output_1 = 'MNTPEHMTAVVQRYVAA'
    output_2 = 'MNTPEHGGGGGQRYVAA'
    assert wt_vs_mut.get_alignment(input_1, input_2) == (output_1, output_2)

def test_toy_insertion_alignment():
    input_1 = 'MNTPEHQRYVAA'
    input_2 = 'MNTPEHMTAVVQRYVAA'
    output_1 = 'MNTPEH-----QRYVAA'
    output_2 = 'MNTPEHMTAVVQRYVAA'
    assert wt_vs_mut.get_alignment(input_1, input_2) == (output_1, output_2)

def test_toy_deletion_alignment():
    input_1 = 'MNTPEHMTAVVQRYVAA'
    input_2 = 'MNTPEHQRYVAA'
    output_1 = 'MNTPEHMTAVVQRYVAA'
    output_2 = 'MNTPEH-----QRYVAA'
    assert wt_vs_mut.get_alignment(input_1, input_2) == (output_1, output_2)

def test_ksi_deletion_alignment():
    input_1 = 'MNTPEHMTAVVQRYVAALNAGDLDGIVALFADDATVENPVGSEPRSGTAAIREFYANSLKLPLAVELTQEVRAVANEAAFAFIVSFEYQGRKTVVAPIDHFRFNGAGKVVSMRALFGEKNIHAGAMNTPEHMTAVVQRYVAALNAGDLDGIVALFADDATVENPVGSEPRSGTAAIREFYANSLKLPLAVELTQEVRAVANEAAFAFIVSFEYQGRKTVVAPIDHFRFNGAGKVVSMRALFGEKNIHAGA'
    input_2 = 'MNTPEHMTAVVQRYVAALNAGDLDGIVALYDSTAQYDEIGFDGGSGTENIRRFYAKQLKLPLAVELTQEVRAVANEAAFAFIVSFEYQGRKTVVAPIDHFRFNGAGKIAEARAIFGDKNIHAGAMNTPEHMTAVVQRYVAALNAGDLDGIVALFADDATVENPVGSEPRSGTAAIREFYANSLKLPLAVELTQEVRATNGEAAFAFIVSFEYQGRKTVVAPIDHFRFNGAGKVVSMRALFGEKNIHAGA'
    output_1 = 'MNTPEHMTAVVQRYVAALNAGDLDGIVALFADDATVENPVGSEPRSGTAAIREFYANSLKLPLAVELTQEVRAVANEAAFAFIVSFEYQGRKTVVAPIDHFRFNGAGKVVSMRALFGEKNIHAGAMNTPEHMTAVVQRYVAALNAGDLDGIVALFADDATVENPVGSEPRSGTAAIREFYANSLKLPLAVELTQEVRAVANEAAFAFIVSFEYQGRKTVVAPIDHFRFNGAGKVVSMRALFGEKNIHAGA'
    output_2 = 'MNTPEHMTAVVQRYVAALNAGDLDGIVALY-DSTAQYDEIGFDGGSGTENIRRFYAKQLKLPLAVELTQEVRAVANEAAFAFIVSFEYQGRKTVVAPIDHFRFNGAGKIAEARAIFGDKNIHAGAMNTPEHMTAVVQRYVAALNAGDLDGIVALFADDATVENPVGSEPRSGTAAIREFYANSLKLPLAVELTQEVRATNGEAAFAFIVSFEYQGRKTVVAPIDHFRFNGAGKVVSMRALFGEKNIHAGA'

    assert wt_vs_mut.get_alignment(input_1, input_2) == (output_1, output_2)

def test_find_mutations():
    wildtype = \
             'ASDFGHKL'
    test_cases = [
            ('ASDFGHKL',   []),     # no mutations
            ('ASDWGHKL',   [3]),    # single mutation
            ('ASDGHKL',    [3]),    # single deletion
            ('ASDFWGHKL',  [4]),    # single insertion
            ('ASDWWGHKL',  [3,4]),  # double mutation
            ('ASDHKL',     [3,4]),  # double deletion
            ('ASDFWWGHKL', [4,5]),  # double insertion
            ('WWASDFGHKL', []),     # left terminal insertion
            ('DFGHKL',     []),     # left terminal deletion
            ('ASDFGHKLWW', []),     # right terminal insertion
            ('ASDFGH',     []),     # right terminal deletion
    ]

    for sequence, mutations in test_cases:
        alignment = wt_vs_mut.get_alignment(wildtype, sequence)
        assert wt_vs_mut.find_mutations(alignment) == mutations

def test_ksi_find_mutations():
    wt = 'MNTPEHMTAVVQRYVAALNAGDLDGIVALFADDATVENPVGSEPRSGTAAIREFYANSLKLPLAVELTQEVRAVANEAAFAFIVSFEYQGRKTVVAPIDHFRFNGAGKVVSMRALFGEKNIHAGAMNTPEHMTAVVQRYVAALNAGDLDGIVALFADDATVENPVGSEPRSGTAAIREFYANSLKLPLAVELTQEVRAVANEAAFAFIVSFEYQGRKTVVAPIDHFRFNGAGKVVSMRALFGEKNIHAGA'
    design_f = 'MNTPEHMTAVVQRYVAALNAGDLDGIVALFADDAKVIETQYPEPRKGTAAIREFYANSLKLPLAVELTQEVRAVANEAAFAFIVSFEYQGRKTVVAPIDHFRFNGAGKVVSARALFGEKNIHAGAMNTPEHMTAVVQRYVAALNAGDLDGIVALFADDATVENPVGSEPRSGTAAIREFYANSLKLPLAVELTQEVRAAANEAAFAFIVSFEYQGRKTVVAPIDHFRFNGAGKVVSMRALFGEKNIHAGA'
    design_j = 'MNTPEHMTAVVQRYVAALNAGDLDGIVALYDSTAQYDEIGFDGGSGTENIRRFYAKQLKLPLAVELTQEVRAVANEAAFAFIVSFEYQGRKTVVAPIDHFRFNGAGKIAEARAIFGDKNIHAGAMNTPEHMTAVVQRYVAALNAGDLDGIVALFADDATVENPVGSEPRSGTAAIREFYANSLKLPLAVELTQEVRATNGEAAFAFIVSFEYQGRKTVVAPIDHFRFNGAGKVVSMRALFGEKNIHAGA'
    design_k = 'MNTPEHMTAVVQRYVAALNAGDLDGIVALFADDATVRESFRPPFTGTAAIREFYANNLKLPLAVELTQEVRAVANEAAFAFIVSFEYQGRKTVVAPIDHFRFNGAGKVVEAQALFGEKNIHAGAMNTPEHMTAVVQRYVAALNAGDLDGIVALFADDATVENPVGSEPRSGTAAIREFYANSLKLPLAVELTQEVRASNNEAAFAFIVSFEYQGRKTVVAPIDHFRFNGAGKVVSMRALFGEKNIHAGA'

    alignment_f = wt_vs_mut.get_alignment(wt, design_f)
    mutants_f = wt_vs_mut.find_mutations(alignment_f)
    assert mutants_f == [34, 36, 37, 38, 39, 40, 41, 45, 111, 198]

    alignment_j = wt_vs_mut.get_alignment(wt, design_j)
    mutants_j = wt_vs_mut.find_mutations(alignment_j)
    assert mutants_j == [29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 48, 49, 52, 56, 57, 108, 109, 110, 111, 114, 117, 198, 199, 200]

    alignment_k = wt_vs_mut.get_alignment(wt, design_k)
    mutants_k = wt_vs_mut.find_mutations(alignment_k)
    assert mutants_k == [36, 37, 38, 39, 40, 41, 42, 44, 45, 57, 110, 111, 112, 198, 199]
